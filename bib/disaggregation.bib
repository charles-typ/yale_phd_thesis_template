
%% Disaggregation
@inproceedings{mind,
author = {Lee, Seung-seob and Yu, Yanpeng and Tang, Yupeng and Khandelwal, Anurag and Zhong, Lin and Bhattacharjee, Abhishek},
title = {{MIND: In-Network Memory Management for Disaggregated Data Centers}},
year = {2021},
booktitle = {{{SOSP}}},
}

@inproceedings {legoos,
  author = {Yizhou Shan and Yutong Huang and Yilun Chen and Yiying Zhang},
  title = {{LegoOS: A Disseminated, Distributed OS for Hardware Resource Disaggregation}},
  booktitle = {OSDI},
  year = {2018},
}

@inproceedings{disagg,
  title={{Network Requirements for Resource Disaggregation}},
  author={Gao, Peter Xiang and Narayan, Akshay and Karandikar, Sagar and Carreira, Joao and Han, Sangjin and Agarwal, Rachit and Ratnasamy, Sylvia and Shenker, Scott},
  booktitle={OSDI},
  year={2016}
}

@conference {memdisagg1,
  author = {Krste Asanovi{\'c}},
  title = {{FireBox: A Hardware Building Block for 2020 Warehouse-Scale Computers}},
  year = {2014},
}

@inproceedings{memdisagg2,
  author = {Novakovic, Stanko and Daglis, Alexandros and Bugnion, Edouard and Falsafi, Babak and Grot, Boris},
  title = {{Scale-out NUMA}},
  year = {2014},
  booktitle = {ASPLOS},
}

@inproceedings{memdisagg3,
  title={{Memory Disaggregation: Research Problems and Opportunities}},
  author={Liu, Ling and Cao, Wenqi and Sahin, Semih and Zhang, Qi and Bae, Juhyun and Wu, Yanzhao},
  booktitle={ICDCS},
  year={2019},
}

@inproceedings{memdisagg4,
  author = {Lim, Kevin and Chang, Jichuan and Mudge, Trevor and Ranganathan, Parthasarathy and Reinhardt, Steven K. and Wenisch, Thomas F.},
  title = {{Disaggregated Memory for Expansion and Sharing in Blade Servers}},
  year = {2009},
  booktitle = {ISCA},
}

@INPROCEEDINGS{memdisagg5,
  author={K. {Lim} and Y. {Turner} and J. R. {Santos} and A. {AuYoung} and J. {Chang} and P. {Ranganathan} and T. F. {Wenisch}},
  booktitle={HPCA}, 
  title={{System-level Implications of Disaggregated Memory}}, 
  year={2012},
}

@Inbook{memdisagg6,
  author="Samih, Ahmad and Wang, Ren and Maciocco, Christian and Kharbutli, Mazen and Solihin, Yan",
  title="Collaborative Memories in Clusters: Opportunities and Challenges",
  bookTitle="Transactions on Computational Science XXII",
  year="2014",
}

@inproceedings{nwsupport,
author = {Han, Sangjin and Egi, Norbert and Panda, Aurojit and Ratnasamy, Sylvia and Shi, Guangyu and Shenker, Scott},
title = {{Network Support for Resource Disaggregation in Next-Generation Datacenters}},
year = {2013},
booktitle = {HotNets},
}

@inproceedings{pegasus,
	author    = {Jialin Li and Jacob Nelson and Ellis Michael and Xin Jin and Dan R. K. Ports},
	title     = {{Pegasus: Tolerating Skewed Workloads in Distributed Storage with In-Network Coherence Directories}},
	booktitle = {OSDI},
	year      = {2020}
}

@inproceedings {infiniswap,
  author = {Juncheng Gu and Youngmoon Lee and Yiwen Zhang and Mosharaf Chowdhury and Kang G. Shin},
  title = {{Efficient Memory Disaggregation with Infiniswap}},
  booktitle = {NSDI},
  year = {2017},
}

@inproceedings{disaggfault,
  author = {Carbonari, Amanda and Beschasnikh, Ivan},
  title = {{Tolerating Faults in Disaggregated Datacenters}},
  year = {2017},
  booktitle = {HotNets},
}

@inproceedings {snowset,
author = {Midhul Vuppalapati and Justin Miron and Rachit Agarwal and Dan Truong and Ashish Motivala and Thierry Cruanes},
title = {Building an Elastic Query Engine on Disaggregated Storage},
booktitle = {{USENIX} Networked Systems Design and Implementation ({USENIX} {NSDI}'20)},
}

%% Compiler or Runtime

@inproceedings{wang2020_semeru,
  title = {Semeru: {{A Memory-Disaggregated Managed Runtime}}},
  shorttitle = {Semeru},
  booktitle = {OSDI},
  author = {Wang, Chenxi and Ma, Haoran and Liu, Shi and Li, Yuanqi and Ruan, Zhenyuan and Nguyen, Khanh and Bond, Michael D. and Netravali, Ravi and Kim, Miryung and Xu, Guoqing Harry},
  year = {2020},
  pages = {261--280},
}

@inproceedings{wang2022_memLiner,
  title = {{{MemLiner}}: {{Lining}} up Tracing and Application for a {{Far-Memory-Friendly}} Runtime},
  booktitle = {OSDI},
  author = {Wang, Chenxi and Ma, Haoran and Liu, Shi and Qiao, Yifan and Eyolfson, Jonathan and Navasca, Christian and Lu, Shan and Xu, Guoqing Harry},
  year = {2022},
  month = jul,
  pages = {35--53},
}

@inproceedings{serverlessdisaggregation,
  title={The Serverless Data Center : Hardware Disaggregation Meets Serverless Computing},
  author={Nathan Pemberton and Johann Schleier-Smith},
  year={2019},
  url={https://api.semanticscholar.org/CorpusID:115138760}
}


@misc{gcs,
      title={GCS: Generalized Cache Coherence For Efficient Synchronization}, 
      author={Yanpeng Yu and Seung-seob Lee and Anurag Khandelwal and Lin Zhong},
      year={2023},
      eprint={2301.02576},
      archivePrefix={arXiv},
      primaryClass={cs.DC}
}

@inproceedings{memtis,
author = {Lee, Taehyung and Monga, Sumit Kumar and Min, Changwoo and Eom, Young Ik},
title = {MEMTIS: Efficient Memory Tiering with Dynamic Page Classification and Page Size Determination},
year = {2023},
isbn = {9798400702297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3600006.3613167},
doi = {10.1145/3600006.3613167},
abstract = {The evergrowing memory demand fueled by datacenter workloads is the driving force behind new memory technology innovations (e.g., NVM, CXL). Tiered memory is a promising solution which harnesses such multiple memory types with varying capacity, latency, and cost characteristics in an effort to reduce server hardware costs while fulfilling memory demand. Prior works on memory tiering make suboptimal (often pathological) page placement decisions because they rely on various heuristics and static thresholds without considering overall memory access distribution. Also, deciding the appropriate page size for an application is difficult as huge pages are not always beneficial as a result of skewed accesses within them. We present Memtis, a tiered memory system that adopts informed decision-making for page placement and page size determination. Memtis leverages access distribution of allocated pages to optimally approximate the hot data set to the fast tier capacity. Moreover, Memtis dynamically determines the page size that allows applications to use huge pages while avoiding their drawbacks by detecting inefficient use of fast tier memory and splintering them if necessary. Our evaluation shows that Memtis outperforms state-of-the-art tiering systems by up to 169.0\% and their best by up to 33.6\%.},
booktitle = {Proceedings of the 29th Symposium on Operating Systems Principles},
pages = {17â€“34},
numpages = {18},
keywords = {tiered memory management, virtual memory, operating system},
location = {Koblenz, Germany},
series = {SOSP '23}
}